import type { paths, components } from './schema-mar24-2025.js' // auto-generated by openapi-typescript
import createClient from 'openapi-fetch'
import type { AppLogger, AppConfig } from '../../config.js'

export type { paths, components }

/** aka 'Function' name.
 * Maybe I should just stick with FunctionName --- not sure that EndpointName is any better */
type EndpointName = string

type Client = ReturnType<typeof createClient<paths>>

export class APIClient {
  #client: Client
  #currentEndpoints: Set<EndpointName>
  #logger: AppLogger

  static make(config: AppConfig) {
    const client = new APIClient(config)
    client.updateEndpointInfo()
    return client
  }

  private constructor(config: AppConfig) {
    this.#client = createClient<paths>({
      baseUrl: config.getDecisionServiceUrl(),
    })

    this.#currentEndpoints = new Set()
    this.#logger = config.getLogger()
  }

  async updateWithProgram<T extends Client['POST'] | Client['PUT']>(
    endpointName: EndpointName,
    path: Parameters<T>[0],
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    init: any
  ) {
    if (!this.#currentEndpoints.has(endpointName)) {
      const { data, error } = await this.#client.POST(path, init)
      if (data) {
        this.#currentEndpoints.add(endpointName)
        this.#logger.info(
          "Successfully POST'd decision service program: ",
          data
        )
      } else if (error) {
        this.#logger.error('ERROR', error)
      }
    } else {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const { data, error } = await this.#client.PUT(path as any, init)
      if (data) {
        this.#currentEndpoints.add(endpointName)
        this.#logger.info("Successfully PUT'd decision service program: ", data)
      } else if (error) {
        this.#logger.error('ERROR', error)
      }
    }
  }

  async getCurrentEndpoints() {
    const { data, error } = await this.#client.GET('/functions', {})
    if (data) {
      return data
    } else {
      return error
    }
  }

  async updateEndpointInfo() {
    const { data, error } = await this.#client.GET('/functions', {})
    if (data) {
      const endpoints: EndpointName[] = data
        .map((fn) => fn.function?.name)
        .filter((n): n is string => n !== undefined)
      this.#currentEndpoints = new Set(endpoints)
    } else {
      console.error(error)
    }
  }

  PUT: Client['PUT'] = (path, ...init) => {
    return this.#client.PUT(path, ...init)
  }

  DELETE: Client['DELETE'] = (path, ...init) => {
    return this.#client.DELETE(path, ...init)
  }
}
